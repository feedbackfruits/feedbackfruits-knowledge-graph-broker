require('dotenv').load({ silent: true });
const { NAME = 'feedbackfruits-knowledge-graph-broker', CAYLEY_ADDRESS = 'http://cayley:64210', KAFKA_ADDRESS = 'tcp://kafka:9092', INPUT_TOPIC = 'quad_update_requests', OUTPUT_TOPIC = 'quad_updates', CONCURRENCY = 100, } = process.env;
const memux = require('memux');
const Cayley = require('cayley');
const { Observable: { empty } } = require('rxjs');
const PQueue = require('p-queue');
const { source, sink, send } = memux({
    name: NAME,
    url: KAFKA_ADDRESS,
    input: INPUT_TOPIC,
    output: OUTPUT_TOPIC
});
const cayley = Cayley(CAYLEY_ADDRESS);
const queue = new PQueue({
    concurrency: CONCURRENCY
});
source.flatMap(({ action: { type, quad }, progress }) => {
    return queue.add(() => new Promise((resolve, reject) => {
        cayley[type]([quad], (error, body, response) => {
            if (error)
                return reject(error);
            if (response.statusCode >= 200 && response.statusCode < 400)
                return send({ type, quad }).then(resolve);
            if (response.statusCode === 400) {
                if ((body.error || body).match(/quad exists/))
                    return resolve();
                if ((body.error || body).match(/invalid quad/))
                    return resolve();
            }
            reject();
        });
    })).then(() => progress);
}).subscribe(sink);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXpDLE1BQU0sRUFDSixJQUFJLEdBQUcsdUNBQXVDLEVBQzlDLGNBQWMsR0FBRyxxQkFBcUIsRUFDdEMsYUFBYSxHQUFHLGtCQUFrQixFQUNsQyxXQUFXLEdBQUcsc0JBQXNCLEVBQ3BDLFlBQVksR0FBRyxjQUFjLEVBQzdCLFdBQVcsR0FBRyxHQUFHLEdBQ2xCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUVoQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFbEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ25DLElBQUksRUFBRSxJQUFJO0lBQ1YsR0FBRyxFQUFFLGFBQWE7SUFDbEIsS0FBSyxFQUFFLFdBQVc7SUFDbEIsTUFBTSxFQUFFLFlBQVk7Q0FDckIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDO0lBQ3ZCLFdBQVcsRUFBRSxXQUFXO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUU7SUFDbEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdkcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO29CQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDaEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbkUsQ0FBQztZQUVELE1BQU0sRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFBO0FBQzFCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyJ9